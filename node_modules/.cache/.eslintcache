[{"/Users/Sam/Desktop/React-workshop-main/src/index.tsx":"1","/Users/Sam/Desktop/React-workshop-main/src/reportWebVitals.ts":"2","/Users/Sam/Desktop/React-workshop-main/src/App.tsx":"3","/Users/Sam/Desktop/React-workshop-main/src/components/PostsList.tsx":"4","/Users/Sam/Desktop/React-workshop-main/src/components/UserProfile.tsx":"5","/Users/Sam/Desktop/React-workshop-main/src/components/EditPost.tsx":"6","/Users/Sam/Desktop/React-workshop-main/src/components/AllUsers.tsx":"7","/Users/Sam/Desktop/React-workshop-main/src/private/Header.tsx":"8","/Users/Sam/Desktop/React-workshop-main/src/private/Field.tsx":"9","/Users/Sam/Desktop/React-workshop-main/src/components/PostItem.tsx":"10","/Users/Sam/Desktop/React-workshop-main/src/components/ImageGalleryPicker.tsx":"11","/Users/Sam/Desktop/React-workshop-main/src/private/SelectedImage.tsx":"12","/Users/Sam/Desktop/React-workshop-main/src/private/Checkmark.tsx":"13","/Users/Sam/Desktop/React-workshop-main/src/api/post.ts":"14","/Users/Sam/Desktop/React-workshop-main/src/api/user.ts":"15","/Users/Sam/Desktop/React-workshop-main/src/components/UserItem.tsx":"16"},{"size":500,"mtime":1649028520000,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1649028520000,"results":"19","hashOfConfig":"18"},{"size":850,"mtime":1649028520000,"results":"20","hashOfConfig":"18"},{"size":1197,"mtime":1649665058624,"results":"21","hashOfConfig":"18"},{"size":1142,"mtime":1649028520000,"results":"22","hashOfConfig":"18"},{"size":6806,"mtime":1649670555192,"results":"23","hashOfConfig":"18"},{"size":1303,"mtime":1649672683178,"results":"24","hashOfConfig":"18"},{"size":1617,"mtime":1649028520000,"results":"25","hashOfConfig":"18"},{"size":336,"mtime":1649028520000,"results":"26","hashOfConfig":"18"},{"size":1732,"mtime":1649667515426,"results":"27","hashOfConfig":"18"},{"size":2777,"mtime":1649748413792,"results":"28","hashOfConfig":"18"},{"size":2684,"mtime":1649028520000,"results":"29","hashOfConfig":"18"},{"size":846,"mtime":1649028520000,"results":"30","hashOfConfig":"18"},{"size":1496,"mtime":1649669792013,"results":"31","hashOfConfig":"18"},{"size":588,"mtime":1649671130053,"results":"32","hashOfConfig":"18"},{"size":1075,"mtime":1649747768185,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"udjpt2",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"47"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Sam/Desktop/React-workshop-main/src/index.tsx",[],[],"/Users/Sam/Desktop/React-workshop-main/src/reportWebVitals.ts",[],[],"/Users/Sam/Desktop/React-workshop-main/src/App.tsx",[],[],"/Users/Sam/Desktop/React-workshop-main/src/components/PostsList.tsx",["89"],[],"import React, { useEffect, useState } from 'react'\nimport { getPosts } from '../api/post'\nimport { Post } from '../api/types'\nimport PostItem from './PostItem'\n\nconst PostsList = () => {\n    const [posts, setPosts] = useState<Array<Post>>([])\n    const [loading, setLoading] = useState(false)\n\n    async function _getPosts() {\n        const data = await getPosts()\n        setPosts(data)\n    }\n\n    useEffect( () => {\n        _getPosts()\n    },[])\n\n    function renderItem(values: Post) {\n        return (\n            <div key={values.id}>\n                <PostItem {...values} />\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">Loading ...</p>\n                </div>\n            </section>\n        )\n    }\n\n    if (posts.length === 0) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">No Posts</p>\n                </div>\n            </section>\n        )\n    }\n\n    return <ul className=\"post-list\">{posts.map(renderItem)}</ul>\n}\n\nexport default PostsList\n",["90","91"],"/Users/Sam/Desktop/React-workshop-main/src/components/UserProfile.tsx",["92","93"],[],"/Users/Sam/Desktop/React-workshop-main/src/components/EditPost.tsx",["94","95","96","97","98"],[],"import React, { useEffect, useReducer, useState } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { getPost, getPosts } from '../api/post'\nimport { Picker_Picture, Post, PostContent, User } from '../api/types'\nimport Field from '../private/Field'\nimport ImageGalleryPicker from './ImageGalleryPicker'\n\ntype FormEvent =\n    | React.ChangeEvent<HTMLTextAreaElement>\n    | React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>\n\ntype FormData = { name: string; value: string | number | undefined }\n\nconst formReducer = (state: Post | PostContent, event: FormData) => {\n    return {\n        ...state,\n        [event.name]: event.value,\n    }\n}\n\nconst EditPost = () => {\n    const [users, setUsers] = useState<Array<User>>([])\n    const [showPictureModal, setShowPictureModal] = useState<boolean>(false)\n    const [formData, setFormData] = useReducer(\n        formReducer,\n        {} as Post | PostContent\n    )\n    let { id } = useParams() // post id from url\n    const navigate = useNavigate() // create a navigate function instance\n\n    async function _getPost(id: number){\n        \n        const data = await getPost(id);\n        convertToFormData(data);\n    }\n\n    useEffect(() => {\n\n        _getPost(Number(id));\n    }, [id]);\n\n    function handleModalPictureSubmit(picture: Picker_Picture) {\n        setFormData({\n            name: 'postImageUrl',\n            value: picture.src,\n        })\n    }\n\n    async function handleAddOrCreatePost(\n        event: React.FormEvent<HTMLFormElement>\n    ) {\n        // remove default reloading page\n        event.preventDefault()\n\n        // back to Home\n        navigate('/')\n    }\n\n    async function handleDeletePost() {\n        // back to Home\n        navigate('/')\n    }\n\n    function handleChange(event: FormEvent) {\n        //\n        const value =\n            event.target.name === 'userId'\n                ? Number(event.target.value)\n                : event.target.value\n        setFormData({\n            name: event.target.name,\n            value,\n        })\n    }\n\n    function convertToFormData(post: Post): void {\n        // helper to convert post data into formData\n        // use it before set formData with API data\n        // ex: convertToFormData(data):\n        ;(Object.keys(post) as Array<keyof typeof post>).map((key) => {\n            setFormData({\n                name: key,\n                value: post[key],\n            })\n        })\n    }\n\n    function handleToggleModal() {\n        // Show & Hide picture modal\n        setShowPictureModal((s) => !s)\n    }\n\n    function getSelectedPicture() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.postImageUrl) {\n            return formData.postImageUrl\n        } else {\n            return 'https://via.placeholder.com/320/810b14'\n        }\n    }\n\n    function getSelectedAuthor() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.userId) {\n            // [WORK]\n            // You need to find the author name with the server\n            return '[TO DO]'\n        } else {\n            return 'Unknown author'\n        }\n    }\n\n    return (\n        <>\n            <form className=\"post-form\" onSubmit={handleAddOrCreatePost}>\n                <Field label=\"Title\">\n                    <input\n                        onBlur={handleChange}\n                        name=\"title\"\n                        className=\"input\"\n                        type=\"text\"\n                        placeholder=\"Text input\"\n                        onChange={handleChange}\n                        value={formData.title}\n                    />\n                </Field>\n                <Field label=\"Content\">\n                    <textarea\n                        onBlur={handleChange}\n                        name=\"body\"\n                        className=\"textarea\"\n                        placeholder=\"e.g. Hello world\"\n                        onChange={handleChange}\n                        value={formData.body}\n                    />\n                </Field>\n                <Field label=\"Post creator\">\n                    {!!!id ? (\n                        <div className=\"select\" defaultValue={formData.userId}>\n                            {users.length > 0 && (\n                                <select\n                                    name=\"userId\"\n                                    onChange={handleChange}\n                                    defaultValue={users[0].id}\n                                >\n                                    {users.map((user) => (\n                                        <option key={user.id} value={user.id}>\n                                            {user.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    ) : (\n                        <label>{getSelectedAuthor()}</label>\n                    )}\n                </Field>\n\n                <Field label=\"Post Picture\">\n                    <input type=\"hidden\" value=\"1\" name=\"postImageID\" />\n                    <div>\n                        <img src={getSelectedPicture()} />\n                        <button\n                            type=\"button\"\n                            className=\"button is-primary\"\n                            onClick={handleToggleModal}\n                        >\n                            Open picker modal\n                        </button>\n                    </div>\n                </Field>\n\n                {!!id && (\n                    <Field label=\"Extra actions\">\n                        <button\n                            type=\"button\"\n                            className=\"button is-warning\"\n                            onClick={handleDeletePost}\n                        >\n                            Delete post\n                        </button>\n                    </Field>\n                )}\n\n                <div className=\"field is-grouped is-grouped-centered\">\n                    <p className=\"control\">\n                        <button type=\"submit\" className=\"button is-primary\">\n                            Submit\n                        </button>\n                    </p>\n                    <p className=\"control\">\n                        <Link to=\"/\" className=\"button is-light\">\n                            Cancel\n                        </Link>\n                    </p>\n                </div>\n            </form>\n            {showPictureModal && (\n                <ImageGalleryPicker\n                    onClose={handleToggleModal}\n                    onSubmit={handleModalPictureSubmit}\n                />\n            )}\n        </>\n    )\n}\n\nexport default EditPost\n","/Users/Sam/Desktop/React-workshop-main/src/components/AllUsers.tsx",["99","100"],[],"import { UseScrollTriggerOptions } from '@mui/material/useScrollTrigger/useScrollTrigger'\nimport React, { useEffect, useState } from 'react'\nimport { User } from '../api/types'\nimport { getAllUser } from '../api/user'\nimport UserItem from './UserItem'\n\n\n\nconst AllUsers = () => {\n    const [users, setAllUsers] = useState<Array<User>>([])\n    const [loading, setLoading] = useState(false)\n\n    async function _getAllUsers() {\n        const data = await getAllUser()\n        setAllUsers(data)\n    }\n\n    useEffect( () => {\n        _getAllUsers()\n    },[])\n\n    function renderItem(values: User) {\n        return (\n            <div key={values.id}>\n                <UserItem {...values} />\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">Loading ...</p>\n                </div>\n            </section>\n        )\n    }\n\n    if (users.length === 0) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">No Users</p>\n                </div>\n            </section>\n        )\n    }\n\n    return <ul className=\"post-list\">{users.map(renderItem)}</ul>\n}\n\nexport default AllUsers\n","/Users/Sam/Desktop/React-workshop-main/src/private/Header.tsx",["101","102","103"],[],"/Users/Sam/Desktop/React-workshop-main/src/private/Field.tsx",[],[],"/Users/Sam/Desktop/React-workshop-main/src/components/PostItem.tsx",["104","105"],[],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Post, User } from '../api/types'\n\nconst PostItem = (props: Post) => {\n    const [author, setAuthor] = useState<User | null>(null)\n\n    return (\n        <Link to={`/post/${props.id}`} key={`key-${props.id}`}>\n            <div className=\"card\">\n                <div className=\"card-image\">\n                    <figure className=\"image is-4by3\">\n                        <img\n                            src={\n                                props.postImageUrl ||\n                                'https://picsum.photos/1280/960'\n                            }\n                            alt=\"Placeholder image\"\n                        />\n                    </figure>\n                </div>\n                <div className=\"card-content\">\n                    <div className=\"media\">\n                        <div className=\"media-content\">\n                            <p className=\"title is-4 post-title\">\n                                {props.title}\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"content post-content\">{props.body}</div>\n                    {author && (\n                        <footer className=\"card-footer\">\n                            <Link\n                                to={`/users/${author.id}`}\n                                className=\"card-footer-item\"\n                            >\n                                {author ? author.name : 'not defined'}\n                            </Link>\n                        </footer>\n                    )}\n                </div>\n            </div>\n        </Link>\n    )\n}\n\nexport default PostItem\n","/Users/Sam/Desktop/React-workshop-main/src/components/ImageGalleryPicker.tsx",["106"],[],"import React, { useState, useCallback } from 'react'\nimport Gallery from 'react-photo-gallery'\nimport { Picker_Picture, API_Picture } from '../api/types'\nimport SelectedImage from '../private/SelectedImage'\n\ntype ImageGalleryPickerProps = {\n    onClose: () => void\n    onSubmit: (picture: Picker_Picture) => void\n}\n\nconst ImageGalleryPicker = ({ onClose, onSubmit }: ImageGalleryPickerProps) => {\n    const [selectedPicture, setSelectedPicture] =\n        useState<null | Picker_Picture>(null)\n    const [pictures, setPictures] = useState<Array<API_Picture>>([])\n\n    async function _getPictures() {\n        const data = await _getPictures()\n        setPictures(data)\n    }\n    function handleOnClick(picture: Picker_Picture) {\n        setSelectedPicture(picture)\n    }\n\n    const imageRenderer = useCallback(\n        ({ index, left, top, key, photo }) => (\n            <SelectedImage\n                onClick={handleOnClick}\n                selected={\n                    selectedPicture ? selectedPicture.id === photo.id : false\n                }\n                key={key}\n                margin={'2px'}\n                index={index}\n                photo={photo}\n                left={left}\n                top={top}\n            />\n        ),\n        [selectedPicture]\n    )\n\n    function handleOnSubmit() {\n        onClose()\n        if (selectedPicture) {\n            onSubmit(selectedPicture)\n        }\n    }\n\n    const rawPictures = pictures.map((picture) => ({\n        src: picture.download_url,\n        width: 4,\n        height: 3,\n        id: picture.id,\n    }))\n\n    return (\n        <div className=\"modal post-image-modal\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">Select a picture</p>\n                    <button\n                        className=\"delete\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    />\n                </header>\n                <section className=\"modal-card-body\">\n                    <Gallery photos={rawPictures} renderImage={imageRenderer} />\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <button\n                        disabled={!!!selectedPicture}\n                        className=\"button is-success\"\n                        onClick={handleOnSubmit}\n                    >\n                        Save changes\n                    </button>\n                    <button className=\"button\" onClick={onClose}>\n                        Cancel\n                    </button>\n                </footer>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageGalleryPicker\n","/Users/Sam/Desktop/React-workshop-main/src/private/SelectedImage.tsx",["107"],[],"/Users/Sam/Desktop/React-workshop-main/src/private/Checkmark.tsx",[],[],"/Users/Sam/Desktop/React-workshop-main/src/api/post.ts",["108","109"],[],"import { Post, PostContent } from './types'\nimport axios from 'axios'\nimport { responsiveFontSizes } from '@mui/material'\n\nconst base_url = 'http://localhost:3004/posts'\n\n\nasync function getPost(postID: Post['id']): Promise<Post> {\n    // get a unique post\n    // [TODO] remove this return to use a fetch API\n   \n    const response = await fetch(`${base_url}/${postID}`)\n    const data = await response.json()\n\n    return data\n    \n}\n\nasync function getPosts(): Promise<Array<Post>> {\n    // get all posts\n    // [TODO] remove this return to use a fetch API\n    \n    const response = await fetch(base_url)\n    const data = await response.json()\n\n\n    return data\n\n}\n\nasync function createPost(post: PostContent): Promise<Post> {\n    // create a new post\n    // [TODO] remove this return to use a fetch API\n    \n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function updatePost(post: Post): Promise<Post> {\n    // update a existing post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\n    // delete a existing post\n    // [TODO] remove this return to use a fetch API\n    return 1\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost }\n","/Users/Sam/Desktop/React-workshop-main/src/api/user.ts",[],[],"/Users/Sam/Desktop/React-workshop-main/src/components/UserItem.tsx",["110"],[],{"ruleId":"111","severity":1,"message":"112","line":8,"column":21,"nodeType":"113","messageId":"114","endLine":8,"endColumn":31},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"111","severity":1,"message":"119","line":7,"column":20,"nodeType":"113","messageId":"114","endLine":7,"endColumn":29},{"ruleId":"111","severity":1,"message":"120","line":9,"column":11,"nodeType":"113","messageId":"114","endLine":9,"endColumn":13},{"ruleId":"111","severity":1,"message":"121","line":3,"column":19,"nodeType":"113","messageId":"114","endLine":3,"endColumn":27},{"ruleId":"111","severity":1,"message":"122","line":23,"column":19,"nodeType":"113","messageId":"114","endLine":23,"endColumn":27},{"ruleId":"123","severity":1,"message":"124","line":41,"column":8,"nodeType":"125","endLine":41,"endColumn":12,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":81,"column":68,"nodeType":"129","messageId":"130","endLine":81,"endColumn":70},{"ruleId":"131","severity":1,"message":"132","line":163,"column":25,"nodeType":"133","endLine":163,"endColumn":59},{"ruleId":"111","severity":1,"message":"134","line":1,"column":10,"nodeType":"113","messageId":"114","endLine":1,"endColumn":33},{"ruleId":"111","severity":1,"message":"112","line":11,"column":21,"nodeType":"113","messageId":"114","endLine":11,"endColumn":31},{"ruleId":"135","severity":1,"message":"136","line":8,"column":17,"nodeType":"133","endLine":8,"endColumn":53},{"ruleId":"131","severity":1,"message":"132","line":9,"column":21,"nodeType":"133","endLine":9,"endColumn":48},{"ruleId":"135","severity":1,"message":"137","line":11,"column":17,"nodeType":"133","endLine":17,"endColumn":18},{"ruleId":"111","severity":1,"message":"119","line":6,"column":20,"nodeType":"113","messageId":"114","endLine":6,"endColumn":29},{"ruleId":"138","severity":1,"message":"139","line":13,"column":25,"nodeType":"133","endLine":19,"endColumn":27},{"ruleId":"111","severity":1,"message":"140","line":17,"column":28,"nodeType":"113","messageId":"114","endLine":17,"endColumn":40},{"ruleId":"131","severity":1,"message":"132","line":86,"column":13,"nodeType":"133","endLine":94,"endColumn":15},{"ruleId":"111","severity":1,"message":"141","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":13},{"ruleId":"111","severity":1,"message":"142","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":29},{"ruleId":"111","severity":1,"message":"143","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},"@typescript-eslint/no-unused-vars","'setLoading' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["144"],"no-negated-in-lhs",["145"],"'setAuthor' is assigned a value but never used.","'id' is assigned a value but never used.","'getPosts' is defined but never used.","'setUsers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getPost'. Either include it or remove the dependency array.","ArrayExpression",["146"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'UseScrollTriggerOptions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'_getPictures' is defined but never used.","'axios' is defined but never used.","'responsiveFontSizes' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},"Update the dependencies array to be: [_getPost, id]",{"range":"149","text":"150"},[1281,1285],"[_getPost, id]"]